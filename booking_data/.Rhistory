str(df)
df$vs  <- factor(df$vs  , labels = c("V", "S"))
df$am  <- factor(df$am  , labels = c("Auto", "Manual"))
?aggregate
mean_hp_vs  <- aggregate(x = df$hp, by = list(df$vs), FUN = mean)
mean_hp_vs
aggregate(hp ~ vs, df, mean)
aggregate(hp ~ vs + am, df, mean)
aggregate(x = df[,-c(8,9)], by = list(df$am), FUN = median)
FUN
aggregate(df[,c(1,3)], by = list(df$am, df$vs), FUN = sd)
aggregate(cbind(mpg, disp) ~ am + vs, df, sd)
my_stats  <- aggregate(cbind(mpg, disp) ~ am + vs, df, sd)
aggregate(mpg ~am, df, sd)
library(ggplot2)
data('diamonds')
general <- diamonds
sample <- sample_frac(diamonds, 0.2)
#qplot(x,y, )
?qplot
install.packages("dplyr")
sample <- sample_frac(diamonds, 0.2)
library(sample_frac)
library(dplyr)
general <- diamonds
sample <- sample_frac(diamonds, 0.2)
, y = price, color = cut, data = sample)
boxplot(sample$
qplot(x = carat, y = price, color = cut, data = sample)
boxplot(sample$carat)
qplot(x = carat, y = price, color = cut, data = sample)
boxplot(sample$carat)
ggplot(mtcars, aes(x = mpg)) + geom_dotplot()
ggplot(mtcars, aes(x = mpg)) + geom_histogram()
mtcars
ggplot(mtcars, aes(x = mpg)) + geom_dotplot()
ggplot(mtcars)
qplot(mtcars)
>qplot
?qplot
qplot(mtcars$mpg,fill = mtcars$cyl, binWidth = 2)
library(ggplot2)
qplot(mtcars$mpg,fill = mtcars$cyl, binWidth = 2)
data('mtcars')
mtcars$cyl <- as.factor(mtcars$cyl)
qplot(mtcars$mpg,fill = mtcars$cyl, binWidth = 2)
qplot(mtcars$mpg,fill = mtcars$cyl, bins = 30)
qplot(mtcars$mpg,fill = mtcars$cyl, bins = 2)
qplot(mtcars$mpg,fill = mtcars$cyl, bins = 20)
qplot(mtcars$mpg, mtcars$disp, mtcars, color=mtcars$cyl)
plot(mtcars$mpg)
head(mtcars$mpg)
?plot
qplot(mtcars$mpg, mtcars$disp, mtcars, color=mtcars$cyl)
qplot(mtcars$mpg, mtcars$disp,color=mtcars$cyl)
qplot(mtcars$mpg, mtcars$disp, mtcars, color=mtcars$cyl)
qplot(mtcars$mpg,fill = mtcars$cyl, bins = 20)
qplot(mtcars$mpg, mtcars$disp, mtcars, color=mtcars$cyl)
qplot(mtcars$mpg, mtcars$disp, mtcars, fill=mtcars$cyl)
qplot(mtcars$mpg, fill = mtcars$cyl, bins = 20)
qplot(mtcars$mpg, fill = mtcars$cyl)
qplot(mtcars$mpg, fill = mtcars$cyl, bins = 30)
ggplot(mtcars, aes(mpg) + geom_point(carb))
ggplot(mtcars, aes(mpg) + geom_point(mtcars$carb))
ggplot(mtcars, aes(mpg) + geom_point(mtcars, aes(carb)))
ggplot(mtcars, aes(mpg) + geom_point(mtcars, aes(color = carb), size=2.5, alpha = 0.8))
data('mtcars')
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(mpg) + geom_point(mtcars, aes(color = carb),
size=2.5, alpha = 0.8))
ggplot(mtcars, aes(mpg,disp) + geom_point(mtcars, aes(color = carb),
size=2.5, alpha = 0.8))
ggplot(mtcars, aes(mpg,disp)) + geom_point(mtcars, aes(color = carb),
size=2.5, alpha = 0.8)
data('mtcars')
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(mpg,disp)) + geom_point(mtcars, aes(color = carb),
size=2.5, alpha = 0.8)
ggplot(mtcars, aes(mpg,disp)) + geom_point(aes(color = carb),
size=2.5, alpha = 0.8)
ggplot(mtcars, aes(mpg, disp)) + geom_point(aes(color = cyl), size = qsec)
ggplot(mtcars, aes(mpg, disp)) + geom_point(aes(color = cyl))
ggplot(mtcars, aes(mpg, disp)) + geom_point(aes(color = cyl), zise = 2)
ggplot(mtcars, aes(mpg, disp)) + geom_point(aes(color = cyl, size = qsec))
ggplot(mtcars, aes(mpg)) + geom_density(aes(color=cyl))
ggplot(mtcars, aes(mpg)) + geom_density(aes(color=cyl, alpha= 0.8))
ggplot(mtcars, aes(mpg)) + geom_density(aes(color=cyl, fill = cyl))
ggplot(mtcars, aes(mpg)) + geom_density(aes(color=cyl))
ggplot(mtcars, aes(mpg)) + geom_density(aes(color=cyl, fill = cyl, alpha=0.8))
ggplot(mtcars, aes(mpg)) + geom_density(aes(color=cyl, fill = cyl, alpha=0.5))
ggplot(mtcars, aes(mpg, fill = cyl)) + geom_density(aes(color=cyl, alpha=0.5))
ggplot(mtcars, aes(rpg, desp)) + geom_boxplot()
ggplot(mtcars, aes(mpg, desp)) + geom_boxplot()
ggplot(mtcars, aes(mpg)) + geom_boxplot()
ggplot(df, aes(x = mpg))+
geom_boxplot()
ggplot(mtcars, aes(x = mpg))+
geom_boxplot()
ggplot(mtcars, aes(mpg, disp, group=cyl)) + geom_boxplot(varwidth = T)
ggplot(mtcars, aes(mpg, disp, group=cyl)) + geom_boxplot()
str(mtcars)
?bartlett.test
bartlett.tex
bartlett.test(lekarstvo$Pressure_before, lekarstvo$Pressure_after)
bartlett.test(lekarstvo$Pressure_before, lekarstvo$Pressure_after, lekarstvo)
bartlett.test(Pressure_before, Pressure_after, lekarstvo)
bartlett.test(lekarstvo$Pressure_before, Pressure_after, lekarstvo)
bartlett.test(lekarstvo$Pressure_before, lekarstvo$Pressure_after, lekarstvo)
bartlett.test(lekarstvo$Pressure_before, lekarstvo$Pressure_after)
bartlett.test(mtcars$mpg, mtcars$cyl)
str(mtcars)
str(lekarstvo)
lekarstvo <-  as.data.frame(lekarstvo)
bartlett.test(lekarstvo$Pressure_before, lekarstvo$Pressure_after)
bartlett.test(mtcars$mpg, mtcars$cyl)
?wilcox.test
#5 minute to solve
myData <- read.csv("C:\Users\sundet\Downloads\dataset_11504_15.txt");
#5 minute to solve
myData <- read.csv("C:/Users/sundet/Downloads/dataset_11504_15.txt");
str(myData)
names(myData)
View(myData)
bartlett.test(myData$X.0.257.1)
bartlett.test(myData)
?bartlett.test
str(myData)
#5 minute to solve
myData <- read.txt("C:/Users/sundet/Downloads/dataset_11504_15.txt");
#5 minute to solve
myData <- read("C:/Users/sundet/Downloads/dataset_11504_15.txt");
myData <- read.csv("C:/Users/sundet/Downloads/dataset_11504_15.txt");
View(myData)
#5 minute to solve
myData <- read.csv("C:/Users/sundet/Downloads/dataset_11504_15 (2).txt");
str(myData)
#5 minute to solve
myData <- read.table("C:/Users/sundet/Downloads/dataset_11504_15 (2).txt");
str(myData)
bartlett.test(myData$v1, myData$v2)
?bartlett.test
bartlett.test(myData$V1, myData$V2)
wilcox.test(myData$V1, myData$V2)
#5 minute to solve
myData <- read.table("C:/Users/sundet/Downloads/dataset_11504_15 (4).txt");
bartlett.test(myData$V1, myData$V2)
t.test(myData$V1, myData$V2)
t.test(myData$V1, myData$V2, var.equal = F)
s$p.value
s <- t.test(myData$V1, myData$V2, var.equal = T)
s$p.value
bartlett.test(myData$V1, myData$V2)
s <- wilcox.test(myData$V1, myData$V2, var.equal = T)
s$p.value
s <- wilcox.test(myData$V1, myData$V2, paired = T)
s$p.value
bartlett.test(V1 ~ V2, myData)
bartlett.test(V1 ~ V2, myData, pared = T)
bartlett.test(V1 ~ V2, myData, paired = T)
s <- wilcox.test(V1 ~ V2, myData, paired = T)
s$p.value
s <- wilcox.test(V1 ~ V2, myData)
s$p.value
s <- wilcox.test(V1 ~ V2, myData, paired = T)
#5 minute to solve
myData <- read.table("C:/Users/sundet/Downloads/dataset_11504_15 (5).txt");
bartlett.test(V1 ~ V2, myData)
s <- wilcox.test(V1 ~ V2, myData, paired = T)
s$p.value
#5 minute to solve
myData <- read.table("C:/Users/sundet/Downloads/dataset_11504_15 (6).txt");
bartlett.test(V1 ~ V2, myData)
s <- wilcox.test(V1 ~ V2, myData)
s$p.value
#second
t.test(myData$V1, myData$V2)
#second
tTest <- t.test(myData$V1, myData$V2)
myData <- read.table("C:/Users/sundet/Downloads/dataset_11504_16.txt");
tTest <- t.test(myData$V1, myData$V2)
tTest$p.value
mean(myData$V1)
mean(myData$V2)
tTest$p.value
tTest <- t.test(myData$V1, myData$V2)
tTest
myData <- read.table("C:/Users/sundet/Downloads/dataset_11504_16.txt (1)");
tTest <- t.test(myData$V1, myData$V2)
myData <- read.table("C:/Users/sundet/Downloads/dataset_11504_16 (1).txt");
tTest <- t.test(myData$V1, myData$V2)
tTest
tTest$p.value
mean(tTest$V1)
mean(tTest$V2)
tTest$p.value
tTest <- read.table("C:/Users/sundet/Downloads/dataset_11504_16 (1).txt");
tTest <- t.test(myData$V1, myData$V2)
tTest$p.value
mean(tTest$V1)
mean(tTest$V2)
tTest$p.value
tTest <- read.table("C:/Users/sundet/Downloads/dataset_11504_16 (1).txt");
tTest <- t.test(tTest$V1, tTest$V2)
mean(tTest$V1)
mean(tTest$V2)
tTest$p.value
myData <- read.table("C:/Users/sundet/Downloads/dataset_11504_16 (1).txt");
tTest <- t.test(tTest$V1, tTest$V2)
mean(myData$V1)
mean(tTest$V2)
tTest$p.value
tTest <- t.test(tTest$V1, tTest$V2)
mean(myData$V1)
mean(myData$V2)
tTest$p.value
?ggplot
str(mtcars)
library(ggplot2)
ggplot(data = mtcars, aes(x = mpg, y = am)) + geom_point()
ggplot(data = mtcars, aes(x = mpg, y = am)) + geom_boxplot()
ggplot(data = mtcars, aes(x = mpg, y = hp)) + geom_boxplot()
ggplot(data = mtcars, aes(x = mpg, y = hp)) + geom_density()
ggplot(data = mtcars, aes(x = mpg)) + geom_density()
s = subset(airquality, Month %in% c(7,8,9) == TRUE)
result <-aggregate(Ozone~Month, s, length)
result
df <- airquality
library(ggplot2)
ggplot(df,aes(x=as.factor(Month), y=Ozone))+
geom_boxplot()
library(ggplot2)
airqualityMonth<−factor(airqualityMonth)
p <- ggplot(airquality, aes(x = Month, y = Ozone) )
p + geom_boxplot()
bartlett.test(V1 ~ V2, myData)
myData <- read.table("C:/Users/sundet/Downloads/dataset_11504_15 (6).txt");
str(myData)
bartlett.test(V1 ~ V2, myData)
s <- wilcox.test(V1 ~ V2, myData)
s$p.value
t <-  HairEyeColor
t
View(t)
prop.table(HairEyeColor[ , ,'Male'],2)
prop.table(HairEyeColor[ , ,'Male'],2)['Red','Blue']
prop.table(HairEyeColor[ , ,'Male'],1)['Red','Blue']
prop.table(HairEyeColor[ , ,'Male'],1)['Blue','Red']
prop.table(HairEyeColor[ , ,'Male'],1)['Blue','Red']
prop.table(HairEyeColor[ , ,'Male'],1)
otheTrable <- prop.table(HairEyeColor[ , ,'Male'],1)
otheTrable <- prop.table(HairEyeColor[ , ,'Male'],1)
otheTrable
general <- diamonds
sample <- sample_frac(diamonds, 0.2)
View(sample)
general <- diamonds
sample <- sample_frac(diamonds, 0.2)
?sample_frac
#qplot(x,y, )
?qplot
?factor
mtcars
str(mtcars)
?mtcars
mtcars$am <- factor(mtcars$am, labels = c('automatic', 'manual'))
str(mtcars)
mtcars$am
?hist
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
df <- mtcars
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
hist(df$mpg,xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
hist(df$mpg,xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3)
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
df <- mtcars
?hist
plot(density(df$mpg), xlab = "MPG", main ="Density of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
plot(df$mpg, xlab = "MPG", main ="Density of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
plot(density(df$mpg), xlab = "MPG", main ="Density of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
boxplot(mpg ~ am, df, ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
boxplot(df$mpg[df$am == "Auto"], df$mpg[df$am == "Manual"], ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
boxplot(df$mpg[df$am == "Auto"], df$mpg[df$am == "Manual"],
ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
plot(df$mpg, df$hp, xlab = "MPG", ylab ="HP" , main ="MPG and HP", pch = 22)
plot(~ mpg + hp, df)
?plot
plot(mtcars$mpg, mtcars$cyl)
plot(mtcars$mpg, mtcars$cyl, color = mtcars$am)
plot?
plot(mtcars$mpg, mtcars$cyl,)
plot?
plot(mtcars$mpg, mtcars$cyl)
plot?
?plot
?plot
summary(aov(yield ~ N * P, npk))[[1]][,5][3]
summary(aov(yield ~ N * P, npk))
summary(aov(yield ~ N * P, npk))[[1]]
summary(aov(yield ~ N * P, npk))[[1]][,5]
sum <- summary(aov(yield ~ N * P, npk))
fit1 <- aov(price ~ origin + store, data=mydata)
summary(fit1)
model.tables(fit1,"means")
fit1 <- aov(price ~ origin + store, data=mydata)
summary(fit1)
fit <- aov(Sepal.Width ~ Species, iris)
summary(fit)
ggplot(fit, aes(Species, Sepal.Width)) + geom_boxplot()
aov9 <- ggplot(fit, aes(Species, Sepal.Width)) + geom_boxplot()
TurkeyHSD(aov9)
?mtcars
?ggplot
str(mtcars)
?mtcars
knitr::opts_chunk$set(echo = TRUE)
mtcars$am <- factor(mtcars$am, labels = c('auto', 'manual'))
library(ggplot2)
mtcars$am <- factor(mtcars$am, labels = c('auto', 'manual'))
str(mtcars)
df <- ggplot(data = mtcars, aes(mpg, am)) + geom_boxplot()
df
?t.test
?mtcars
?t.test
?mtcars
?.t.test
?t.test
arr <- rnorm(100);
?rnorm
arr[1:10] <- NA
arr[arr['NA']]
arrNa <- arr[arr['NA']]
arrNa
arrNa <- is.na(arr)
arrNa <- is.na(arr)
arr[is.na(arr)]
?which
changeNa -> function(arr) {
which(is.na(arr))
}
arr[1:10] <- NA
changeNa -> function(arr) {
which(is.na(arr))
}
NA.position(arr)
changeNa(arr)
changeNa(arr)
changeNa -> function(arr) {
which(is.na(arr))
}
changeNa -> function(arr) {
which(is.na(arr))
}
changeNa(arr)
changeNa <- function(arr) {
which(is.na(arr))
}
changeNa(arr)
library(keras)
library(mlbench)
library(dplyr)
library(magrittr)
library(neuralnet)
library(caret)
data %<>% mutate_if(is.factor,as.numeric)
attach(data)
rf <- randomForest::randomForest(medv~.,data)
randomForest::varImpPlot(rf)
# Neural network visualization
n <- neuralnet(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + b + lstat,
data = data,
hidden = c(10,5),
linear.output = F,
lifesign = "full",
rep=1)
plot(n,
col.hidden = 'darkgreen',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'lightblue')
# Matrix
data <- as.matrix(data)
dimnames(data) <- NULL
# partition
set.seed(1234)
index <- createDataPartition(data[,14],p=0.8,list=FALSE)
train <- data[index,c(1:13)]
test <- data[-index,c(1:13)]
traintarget <- data[index,14]
testtarget <- data[-index,14]
# Normalize
m <- colMeans(train)
s <- apply(train, 2, sd)
train <- scale(train,center = m,scale = s)
test <- scale(test,center = m,scale = s)
# Create model
data("BostonHousing")
data <- BostonHousing
data %<>% mutate_if(is.factor,as.numeric)
attach(data)
rf <- randomForest::randomForest(medv~.,data)
randomForest::varImpPlot(rf)
# Neural network visualization
n <- neuralnet(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + b + lstat,
data = data,
hidden = c(10,5),
linear.output = F,
lifesign = "full",
rep=1)
plot(n,
col.hidden = 'darkgreen',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'lightblue')
# Matrix
data <- as.matrix(data)
dimnames(data) <- NULL
# partition
set.seed(1234)
index <- createDataPartition(data[,14],p=0.8,list=FALSE)
train <- data[index,c(1:13)]
test <- data[-index,c(1:13)]
traintarget <- data[index,14]
testtarget <- data[-index,14]
# Normalize
m <- colMeans(train)
s <- apply(train, 2, sd)
train <- scale(train,center = m,scale = s)
test <- scale(test,center = m,scale = s)
model <- keras_model_sequential() # Среда для реализации
# Сделать каркас нейронной сети
model %>%
layer_dense(units = 5, activation = "relu", input_shape = c(13)) %>%
layer_dense(units = 1)
# Compile  (определяются метрики исчисления эффективности)
model %>% compile(loss = 'mse',
optimizer = 'rmsprop',
metrics = 'mae')
# Fit Model
mymodel <- model %>%
fit(train,
traintarget,
epochs = 100,
batch_size = 32,
validation_split = 0.2)
model %>%  evaluate(test, testtarget)
pred <- model %>% predict(test)
mean((testtarget-pred))
plot(testtarget,pred)
(range(df$medv))
summary(model)
model %>% compile(loss = 'mse',
optimizer = 'rmsprop',
metrics = 'mae')
mymodel <- model %>%
fit(train,
traintarget,
epochs = 100,
batch_size = 32,
validation_split = 0.2)
model %>%  evaluate(test, testtarget)
mean((testtarget-pred))
plot(testtarget,pred)
model <- keras_model_sequential()
model %>%
layer_dense(units = 100, activation = "relu", input_shape = c(13)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 50, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 20, activation = 'relu') %>%
layer_dropout(rate = 0.2) %>%
layer_dense(units = 1)
summary(model)
model %>% compile(loss = 'mse',
optimizer = 'rmsprop',
metrics = 'mae')
mymodel <- model %>%
fit(train,
traintarget,
epochs = 100,
batch_size = 32,
validation_split = 0.2)
model %>%  evaluate(test, testtarget)
pred <- model %>% predict(test)
mean((testtarget-pred))
setwd("C:/OSPanel/domains/front/booking_data")
read.csv('booking.csv')
read.csv('bookking.csv')
read.csv('bokking.csv')
read.csv('bokking.csv', header = F)
booking <- read.csv('bokking.csv', header = F)
View(booking)
booking <- read.csv('bokking.csv', sep=',')
booking <- read.csv('bokking.csv', sep=',', header = F)
booking <- read.csv('bokking.csv', header = F)
